{"version":3,"sources":["components/ShowOffProjects/VideoSnippets/VideoSnippets.jsx","components/ShowOffProjects/InfoCard/InfoCard.jsx","hooks/useOnScreenHook.js","components/ShowOffProjects/VideoView/VideoView.jsx"],"names":["VideoSnippets","props","muted","controls","playing","isPlaying","loop","width","height","className","url","InfoCard","ref","useRef","isVisible","useState","isIntersecting","setIntersecting","observer","IntersectionObserver","entry","useEffect","observe","current","disconnect","useOnScreen","titleContent","title","content","video","style","marginTop","leftGrid","rightGrid","leftContent","rightContent","direction","col","container","hidden","opacity","scale","visible","transition","delayChildren","staggerChildren","MotionItem","y","VideoView","redirectToMain","setRedirectToMain","onPlayVideo","data","console","log","to","margin","padding","cursor","onClick","event","onBackToMain","icon","faChevronLeft","marginRight","subtitle","ul","variants","initial","animate","info","map","item","li","key","color","activeClass","spy","smooth","duration","containerId","tocLabel","name","id","position","overflowY","marginBottom"],"mappings":"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","file":"static/js/13.c2ad9137.chunk.js","sourcesContent":["import React from 'react'\r\nimport ReactPlayer from 'react-player'\r\n\r\nconst VideoSnippets = props => {\r\n    return <div>\r\n        <ReactPlayer\r\n            muted={true}\r\n            controls={true}\r\n            playing={props.isPlaying}\r\n            loop={true}\r\n            width='100%'\r\n            height='100%'\r\n            className='react-player'\r\n            url={props.url}\r\n        />\r\n    </div>\r\n}\r\n\r\nexport default VideoSnippets","import React, { useRef } from 'react'\r\nimport { Grid, Cell } from 'react-mdl'\r\nimport VideoSnippets from '../VideoSnippets/VideoSnippets'\r\nimport './InfoCard.scss'\r\nimport useOnScreen from '../../../hooks/useOnScreenHook'\r\n\r\nconst InfoCard = props => {\r\n    const ref = useRef()\r\n    const isVisible = useOnScreen(ref)\r\n\r\n    const titleContent = <div>\r\n        <h1>{props.title}</h1>\r\n        <h5>{props.content}</h5>\r\n    </div>\r\n\r\n    const video = <div style={{marginTop: '5vh'}}>\r\n        <VideoSnippets url={props.url} isPlaying={isVisible}/>\r\n    </div>\r\n\r\n    let leftGrid = 3\r\n    let rightGrid = 9\r\n    let leftContent = titleContent\r\n    let rightContent = video\r\n\r\n    if(props.direction === 'right'){\r\n        leftGrid = 9\r\n        rightGrid = 3\r\n        leftContent = video\r\n        rightContent = titleContent\r\n    }\r\n\r\n    return <div className=\"video_card\" ref={ref}>\r\n        <Grid>\r\n                <Cell col={leftGrid}>\r\n                   {leftContent}\r\n                </Cell>\r\n                <Cell col={rightGrid}>\r\n                    {rightContent}\r\n                </Cell>\r\n            </Grid>\r\n    </div>\r\n}\r\n\r\nexport default InfoCard","import {useState, useEffect} from 'react'\r\n\r\nexport default function useOnScreen(ref) {\r\n\r\n    const [isIntersecting, setIntersecting] = useState(false)\r\n  \r\n    const observer = new IntersectionObserver(\r\n      ([entry]) => setIntersecting(entry.isIntersecting)\r\n    )\r\n  \r\n    useEffect(() => {\r\n      observer.observe(ref.current)\r\n      // Remove the observer as soon as the component is unmounted\r\n      return () => { observer.disconnect() }\r\n    }, [observer, ref])\r\n  \r\n    return isIntersecting\r\n  }","import React, { useState } from 'react'\r\nimport InfoCard from '../InfoCard/InfoCard'\r\nimport { Link, Element } from 'react-scroll'\r\nimport './VideoView.scss'\r\nimport { Grid, Cell } from 'react-mdl';\r\nimport { motion } from \"framer-motion\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faChevronLeft } from '@fortawesome/free-solid-svg-icons'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nconst container = {\r\n    hidden: { opacity: 1, scale: 0 },\r\n    visible: {\r\n        opacity: 1,\r\n        scale: 1,\r\n        transition: {\r\n            delayChildren: 0.3,\r\n            staggerChildren: 0.2\r\n        }\r\n    }\r\n}\r\n\r\nconst MotionItem = {\r\n    hidden: { y: 20, opacity: 0 },\r\n    visible: {\r\n        y: 0,\r\n        opacity: 1\r\n    }\r\n}\r\n\r\n\r\nconst VideoView = props => {\r\n    const [redirectToMain, setRedirectToMain] = useState(false)\r\n    \r\n    const backToMain = (event) => {\r\n        setRedirectToMain(true)\r\n        props.onBackToMain(event)\r\n    }\r\n\r\n    const onPlayVideo = (data) => {\r\n        console.log(data)\r\n    }\r\n\r\n    return <div>\r\n        {redirectToMain && <Redirect to=\"/projects\"/>}\r\n        <Grid style={{}}>\r\n            <Cell col={2} className=\"table-of-contents\" style={{ margin: 0, padding: 0 }}>\r\n\r\n                <div className=\"table-of-contents-title\">\r\n                    <div style={{ cursor: 'pointer' }}\r\n                        onClick={backToMain}>\r\n                    <h6>\r\n                        <FontAwesomeIcon icon={faChevronLeft} style={{ marginRight: '5px' }}/>\r\n                        Back to all projects</h6>\r\n                    </div>\r\n                    <h1>{props.title}</h1>\r\n                    <h3>{props.subtitle}</h3>\r\n                </div>\r\n                <br />\r\n                <div className=\"table-of-contents-list\">\r\n                    <motion.ul\r\n                        className=\"container\"\r\n                        variants={container}\r\n                        initial=\"hidden\"\r\n                        animate=\"visible\"\r\n                    >\r\n                        {\r\n                            props.info.map(item =>\r\n                                <motion.li key={item.key} variants={MotionItem} >\r\n                                    <Link\r\n                                        style={{ color: 'black' }}\r\n                                        activeClass=\"active-scroll\" to={item.key}\r\n                                        spy={true} smooth={true} duration={250} containerId=\"containerElement\"\r\n                                    >\r\n                                        {item.tocLabel}\r\n                                    </Link>\r\n                                </motion.li>\r\n                            )\r\n                        }\r\n                        {\r\n                            /**\r\n                             * <Link\r\n                                style={{ color: 'black' }}\r\n                                activeClass=\"active-scroll\" to=\"secondInsideContainer\"\r\n                                spy={true} smooth={true} duration={250} containerId=\"containerElement\"\r\n                                >\r\n                                    Go to second element inside container\r\n                                </Link>\r\n                             <li> <a href=\"#options\" class=\"\">Options</a> </li>\r\n                             */\r\n                        }\r\n                    </motion.ul>\r\n                </div>\r\n            </Cell>\r\n            <Cell col={10} className=\"video-contents\">\r\n                <Element name=\"test7\" className=\"containerElement\" id=\"containerElement\" style={{\r\n                    position: 'relative',\r\n                    height: '88vh',\r\n                    overflowY: 'scroll'\r\n                }}>\r\n                    <ul>\r\n                        {props.info.map(item =>{\r\n                            return <li key={item.key}>\r\n                                <Element name={item.key} key={item.key} style={{\r\n                                    marginBottom: '0px'\r\n                                }}>\r\n                                    <InfoCard {...item} onPlayVideo={onPlayVideo} />\r\n                                </Element>\r\n                            </li>\r\n                            }\r\n                        )\r\n                        }\r\n                    </ul>\r\n                </Element>\r\n            </Cell>\r\n        </Grid>\r\n    </div>\r\n}\r\n\r\nexport default VideoView"],"sourceRoot":""}