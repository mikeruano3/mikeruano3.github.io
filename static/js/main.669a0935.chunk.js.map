{"version":3,"sources":["assets/img/space.jpg","components/LoadingTools/Spinner/Spinner.jsx","components/mainrouter.js","components/Layout/rainbowLink.jsx","components/Layout/Layout.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Spinner","props","className","Main","withRouter","location","LandingPage","React","lazy","Contact","Resume","ProjectDemos","routes","path","name","Component","exact","basename","map","key","match","CSSTransition","in","timeout","classNames","unmountOnExit","fallback","LinkComponent","to","styleBefore","activeClassName","children","useState","hover","hoverState","setHoverState","linkStyle","setLinkStyle","toggleStyle","onMouseEnter","onMouseLeave","useStyles","makeStyles","theme","root","flexGrow","drawer","breakpoints","up","width","flexShrink","appBar","marginLeft","menuButton","marginRight","spacing","toolbar","mixins","drawerPaper","title","LayoutComponent","classes","useTheme","mobileOpen","setMobileOpen","handleDrawerToggle","navigation","useCallback","container","undefined","window","document","body","Divider","threeDotButton","IconButton","edge","color","aria-label","onClick","Hidden","xsDown","AppBar","position","style","background","spaceImg","Toolbar","smUp","implementation","Drawer","variant","anchor","direction","open","onClose","paper","ModalProps","keepMounted","App","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.669a0935.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/space.43374a7a.jpg\";","import React from 'react'\r\nimport './Spinner.css'\r\n\r\nconst Spinner = props => {\r\n    return <div className=\"lds-ring-container\">\r\n        <div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\r\n    </div>\r\n}\r\n\r\nexport default Spinner","import React, { Suspense } from 'react'\r\nimport { HashRouter, Route, withRouter } from 'react-router-dom'\r\nimport { CSSTransition } from 'react-transition-group'\r\nimport Spinner from './LoadingTools/Spinner/Spinner'\r\n\r\nconst Main = withRouter(({ location }) => {\r\n\r\n    const LandingPage = React.lazy(() => import('./LandingPage/LandingPage')) \r\n    const Contact = React.lazy(() => import('./contact')) \r\n    const Resume = React.lazy(() => import('./Resume/resume')) \r\n    const ProjectDemos = React.lazy(() => import('./Demos/ProjectDemo')) \r\n    const Code = React.lazy(() => import('./Code/projects'))  \r\n    const Dashboard = React.lazy(() => import('./ShowOffProjects/Dashboard/Dashboard'))  \r\n\r\n    const routes = [\r\n        { path: \"/\", name: 'LandingPage', Component: LandingPage, exact: true },\r\n        { path: \"/contact\", name: 'Contact', Component: Contact, exact: true},\r\n        { path: \"/code\", name: 'Code', Component: Code, exact: true },\r\n        { path: \"/resume\", name: 'Resume', Component: Resume, exact: true },\r\n        { path: \"/demos\", name: 'ProjectDemos', Component: ProjectDemos, exact: false },\r\n        { path: \"/projects\", name: 'Dashboard', Component: Dashboard, exact: false },\r\n      ]\r\n\r\n    return  <HashRouter basename='/'>\r\n                {routes.map(({ path, Component, props, exact }) => (\r\n                <Route key={path} exact={exact} path={path}>\r\n                {({ match }) => (\r\n                    <CSSTransition\r\n                    in={match != null}\r\n                    timeout={500}\r\n                    classNames=\"slide\"\r\n                    unmountOnExit\r\n                    >\r\n                    <div className=\"slide\">\r\n                        <Suspense fallback={<Spinner />}> <Component {...props}/> </Suspense>\r\n                    </div>\r\n                    </CSSTransition>\r\n                )}\r\n                </Route>))\r\n                }\r\n            </HashRouter>\r\n\r\n        /**\r\n       *  <TransitionGroup>\r\n        <CSSTransition\r\n            mountOnEnter\r\n            key={location.key}\r\n            classNames=\"slide\"\r\n            timeout={1000}>\r\n            <Switch location={location}>\r\n                <HashRouter basename='/'>\r\n                    <Route exact path=\"/\" component={LandingPage} />\r\n                    <Route exact path=\"/contact\" component={Contact} />\r\n                    <Route exact path=\"/code\" render={() => (\r\n                        <Suspense fallback={<Spinner/>}>\r\n                            <Code/>\r\n                        </Suspense>\r\n                        )} />\r\n                    <Route exact path=\"/resume\" component={Resume} />\r\n                    <Route path=\"/demos\" render={() => (\r\n                        <Suspense fallback={<Spinner/>}>\r\n                            <ProjectDemos/>\r\n                        </Suspense>\r\n                        )} /> \r\n                    <Route path=\"/projects\" component={Dashboard}/>\r\n                </HashRouter>\r\n            </Switch>\r\n        </CSSTransition>\r\n    </TransitionGroup>\r\n       */\r\n})\r\n\r\nexport default Main;","import React, { useState } from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport './rainbow.scss'\r\n\r\nconst LinkComponent = props => {\r\n    const { to, styleBefore, activeClassName, exact, children} = props\r\n\r\n    const [hoverState, setHoverState] = useState({hover: false})\r\n    const [linkStyle, setLinkStyle] = useState(styleBefore)\r\n    \r\n    const toggleStyle = () => {\r\n        if (hoverState.hover) {\r\n            setLinkStyle(styleBefore)\r\n        } else {\r\n            setLinkStyle(styleBefore)\r\n        }\r\n        setHoverState({hover: !hoverState.hover})\r\n    };\r\n\r\n    return (\r\n            <NavLink to={to} className={linkStyle} activeClassName={activeClassName} exact={exact}\r\n                onMouseEnter={toggleStyle} \r\n                onMouseLeave={toggleStyle}>\r\n                {\r\n                hoverState.hover ? \r\n                    (\r\n                        <ul className=\"c-rainbow\">\r\n                            <li className=\"c-rainbow__layer c-rainbow__layer--white\">{children}</li>\r\n                            <li className=\"c-rainbow__layer c-rainbow__layer--orange\">{children}</li>\r\n                            <li className=\"c-rainbow__layer c-rainbow__layer--red\">{children}</li>\r\n                            <li className=\"c-rainbow__layer c-rainbow__layer--violet\">{children}</li>\r\n                            <li className=\"c-rainbow__layer c-rainbow__layer--blue\">{children}</li>\r\n                            <li className=\"c-rainbow__layer c-rainbow__layer--green\">{children}</li>\r\n                            <li className=\"c-rainbow__layer c-rainbow__layer--yellow\">{children}</li>\r\n                        </ul>  \r\n                    ):(\r\n                        children\r\n                    )\r\n                }\r\n            </NavLink>\r\n    )\r\n} \r\n\r\nexport default LinkComponent","import React, {useCallback} from 'react'\r\n//import { Layout, Header, Drawer, Content } from 'react-mdl'\r\nimport MainRouter from '../mainrouter'\r\nimport { NavLink, HashRouter } from 'react-router-dom'\r\nimport RainbowLink from './rainbowLink'\r\nimport './Layout.scss'\r\nimport spaceImg from '../../assets/img/space.jpg'\r\n\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport MenuIcon from '@material-ui/icons/Menu'\r\nimport Drawer from '@material-ui/core/Drawer'\r\nimport Hidden from '@material-ui/core/Hidden'\r\nimport Divider from '@material-ui/core/Divider'\r\n//import Typography from '@material-ui/core/Typography'\r\n//import Button from '@material-ui/core/Button'\r\n//import List from '@material-ui/core/List'\r\n//import ListItem from '@material-ui/core/ListItem'\r\n//import ListItemIcon from '@material-ui/core/ListItemIcon'\r\n//import ListItemText from '@material-ui/core/ListItemText';\r\n\r\nconst drawerWidth = 240\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    drawer: {\r\n        [theme.breakpoints.up('sm')]: {\r\n          width: drawerWidth,\r\n          flexShrink: 0,\r\n        },\r\n      },\r\n      appBar: {\r\n        [theme.breakpoints.up('sm')]: {\r\n          width: `calc(100% - ${drawerWidth}px)`,\r\n          marginLeft: drawerWidth,\r\n        },\r\n      },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n     // necessary for content to be below app bar\r\n    toolbar: theme.mixins.toolbar,\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n}))\r\n\r\nconst LayoutComponent = props => {\r\n    const classes = useStyles()\r\n    const theme = useTheme()\r\n    const [mobileOpen, setMobileOpen] = React.useState(false)\r\n\r\n    const handleDrawerToggle = () => {\r\n        setMobileOpen(!mobileOpen)\r\n    }\r\n\r\n    const navigation = useCallback((className, activeClassName) =>{\r\n        return <HashRouter basename='/'>\r\n            <RainbowLink to=\"/\" styleBefore={className} activeClassName={activeClassName} exact={true}>Home</RainbowLink>\r\n            <NavLink to=\"/resume\" className={className} activeClassName={activeClassName}>Resume</NavLink>\r\n            <NavLink to=\"/projects\" className={className} activeClassName={activeClassName}>Projects</NavLink>\r\n            <NavLink to=\"/code\" className={className} activeClassName={activeClassName}>Code</NavLink>\r\n            <NavLink to=\"/contact\" className={className} activeClassName={activeClassName}>Contact</NavLink>\r\n            <NavLink to=\"/demos\" className={className} activeClassName={activeClassName}>Demos</NavLink>\r\n        </HashRouter>\r\n    }, [])\r\n\r\n    const container = window !== undefined ? () => document.body : undefined;\r\n\r\n    const drawer = (\r\n        <div>\r\n            <div className={classes.toolbar} />\r\n            <Divider />\r\n            <div className={'navigationLinksFlex '}>\r\n                {navigation('navigationLinks navigationLinksLeft', 'navigationLinksLeftActive')}\r\n            </div>\r\n            <Divider />\r\n        </div>\r\n      )\r\n\r\n    const threeDotButton = <IconButton \r\n        edge=\"start\" \r\n        className={classes.menuButton} \r\n        color=\"inherit\" aria-label=\"menu\"\r\n        onClick={handleDrawerToggle}\r\n        >\r\n            <MenuIcon />\r\n    </IconButton>\r\n\r\n    return (<div>\r\n        <div className={classes.root}>\r\n            <Hidden xsDown >\r\n                <AppBar position=\"fixed\" style={{background: `url(${spaceImg}) center / cover`,}}>\r\n                    <Toolbar>\r\n                        {threeDotButton}\r\n                        { navigation('navigationLinks', 'navigationLinksActive') }\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </Hidden>\r\n            <Hidden smUp >\r\n                <AppBar position=\"fixed\" style={{background: `url(${spaceImg}) center / cover`,}}>\r\n                    <Toolbar>\r\n                        {threeDotButton}\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </Hidden>\r\n            <nav className={classes.drawer}>\r\n                <Hidden smUp implementation=\"css\">\r\n                <Drawer\r\n                    container={container}\r\n                    variant=\"temporary\"\r\n                    anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n                    open={mobileOpen}\r\n                    onClose={handleDrawerToggle}\r\n                    classes={{\r\n                    paper: classes.drawerPaper,\r\n                    }}\r\n                    ModalProps={{\r\n                    keepMounted: true, // Better open performance on mobile.\r\n                    }}\r\n                >\r\n                    {drawer}\r\n                </Drawer>\r\n                </Hidden>\r\n            </nav>\r\n        </div>\r\n            {/*\r\n            <Layout>\r\n                <Header \r\n                    style={{background: `url(${spaceImg}) center / cover`,}}\r\n                    title={\r\n                        <RainbowLink to=\"/\" text=\"MyPortfolio\"/>} >\r\n                    {navigation}\r\n                </Header>\r\n                <Drawer  title={\r\n                    <Link style={{textDecoration: 'none'}} to=\"/\">\r\n                        MyPortfolio\r\n                    </Link>\r\n                }>\r\n                    {navigation}\r\n                </Drawer>\r\n                <Content>\r\n                    <MainRouter/>\r\n                </Content>    \r\n            </Layout>\r\n            */}\r\n            <div className=\"content-margin-top\">\r\n                <MainRouter/>\r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n  \r\n  export default LayoutComponent;\r\n  ","import React from 'react';\r\nimport './App.css';\r\nimport './Animations.css';\r\nimport LayoutComponent from './components/Layout/Layout';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <LayoutComponent />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'react-mdl/extra/material.css';\r\nimport 'react-mdl/extra/material.js';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}