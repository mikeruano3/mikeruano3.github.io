{"version":3,"sources":["components/ShowOffProjects/VideoView/info.js","components/ShowOffProjects/Dashboard/Dashboard.jsx"],"names":["ticoInfo","key","tocLabel","title","content","direction","url","tesisInfo","Dashboard","props","history","useHistory","onBackToMain","VideoView","React","lazy","routes","path","name","Component","onShowProject","projectData","replace","pathname","push","info","subtitle","map","exact","match","CSSTransition","in","timeout","classNames","unmountOnExit","className","fallback","Spinner"],"mappings":"oPAAaA,EAAW,CACpB,CACIC,IAAK,IACLC,SAAU,kBACVC,MAAO,kBACPC,QAAS,gGACTC,UAAW,QACXC,IAAK,+BAET,CACIL,IAAK,IACLC,SAAU,4BACVC,MAAO,4BACPC,QAAS,iIACTC,UAAW,OACXC,IAAK,6BAET,CACIL,IAAK,IACLC,SAAU,6BACVC,MAAO,6BACPC,QAAS,0JACTC,UAAW,QACXC,IAAK,6BAET,CACIL,IAAK,IACLC,SAAU,wBACVC,MAAO,wBACPC,QAAS,kJACTC,UAAW,OACXC,IAAK,0CAET,CACIL,IAAK,IACLC,SAAU,4BACVC,MAAO,4BACPC,QAAS,gHACTC,UAAW,QACXC,IAAK,6BAET,CACIL,IAAK,IACLC,SAAU,mCACVC,MAAO,mCACPC,QAAS,oLACTC,UAAW,OACXC,IAAK,wCAET,CACIL,IAAK,IACLC,SAAU,yBACVC,MAAO,0BACPC,QAAS,oIACTC,UAAW,QACXC,IAAK,qCAET,CACIL,IAAK,IACLC,SAAU,qBACVC,MAAO,qBACPC,QAAS,4HACTC,UAAW,OACXC,IAAK,8BAIAC,EAAY,CACrB,CACIN,IAAK,IACLC,SAAU,aACVC,MAAO,aACPC,QAAS,qOACTC,UAAW,QACXC,IAAK,4BCiCEE,UAjGG,SAAAC,GAChB,IAAMC,EAAUC,cAuBVC,EAAe,aAMfC,EAAYC,IAAMC,MAAK,kBAAM,sEAG7BC,EAAS,CACb,CAAEC,KAAM,aAAcC,KAAM,OAAQC,UAHlBL,IAAMC,MAAK,kBAAM,wDAGyBN,MAAO,CAAEW,cA5BjD,SAACC,GACrBX,EAAQY,QAAQ,CAACC,SAAU,KAC3Bb,EAAQc,KAAK,CAACD,SAAU,aAAeF,EAAYf,SA2BnD,CAAEW,KAAM,iBAAkBC,KAAM,OAAQC,UAAWN,EAAWJ,MAAO,CAACgB,KAAMzB,EAAUG,MAAO,OAAQuB,SAAU,mBAAoBd,aAAcA,IACjJ,CAAEK,KAAM,mBAAoBC,KAAM,SAAUC,UAAWN,EAAWJ,MAAO,CAACgB,KAAMlB,EAAWJ,MAAO,kBAAmBuB,SAAU,mBAAoBd,aAAcA,KAInK,OAAO,6BACHI,EAAOW,KAAI,gBAAGV,EAAH,EAAGA,KAAME,EAAT,EAASA,UAAWV,EAApB,EAAoBA,MAApB,OACL,kBAAC,IAAD,CAAOR,IAAKgB,EAAMW,OAAK,EAACX,KAAMA,IAC3B,gBAAGY,EAAH,EAAGA,MAAH,OACC,kBAACC,EAAA,EAAD,CACEC,GAAa,MAATF,EACJG,QAAS,IACTC,WAAW,OACXC,eAAa,GAEb,yBAAKC,UAAU,QACb,kBAAC,WAAD,CAAUC,SAAU,kBAACC,EAAA,EAAD,OAApB,IAAkC,kBAAClB,EAAcV,GAAjD,aAXX","file":"static/js/11.f95525bb.chunk.js","sourcesContent":["export const ticoInfo = [\r\n    {\r\n        key: '1',\r\n        tocLabel: 'Dynamic Layouts',\r\n        title: 'Dynamic Layouts',\r\n        content: 'The dynamic layouts allows an admin user to add, remove, relocate and resize the user inputs.',\r\n        direction: 'right',\r\n        url: 'videos/dynamic-layouts.webm'\r\n    },\r\n    {\r\n        key: '2',\r\n        tocLabel: 'Google Sheets Integration',\r\n        title: 'Google Sheets Integration',\r\n        content: 'TICO is able to consume the Google Sheets API in order to build a document based on the user inputs and other app information.',\r\n        direction: 'left',\r\n        url: 'videos/google-sheets.webm'\r\n    },\r\n    {\r\n        key: '3',\r\n        tocLabel: 'Generate PDFs from the App',\r\n        title: 'Generate PDFs from the App',\r\n        content: 'After generating a Google Sheets API Document, TICO is ready to transform it to PDF and join it to the other document that were added to the workspace.',\r\n        direction: 'right',\r\n        url: 'videos/generate-PDFS.webm'\r\n    },\r\n    {\r\n        key: '4',\r\n        tocLabel: 'Multiple File Uploads',\r\n        title: 'Multiple File Uploads',\r\n        content: 'Given the fact that you can merge multiple PDFs into one, you can also add multiple documents at once!, you can also multiple-delete documents!',\r\n        direction: 'left',\r\n        url: 'videos/multiple-upload-and-delete.webm'\r\n    },\r\n    {\r\n        key: '5',\r\n        tocLabel: 'Services Oriented Project',\r\n        title: 'Services Oriented Project',\r\n        content: 'The coding of TICO is designed to be service-oriented so the programmer can make changes in a blink of an eye',\r\n        direction: 'right',\r\n        url: 'videos/auto-complete.webm'\r\n    },\r\n    {\r\n        key: '6',\r\n        tocLabel: 'Dynamic Reorder and Migrate Data',\r\n        title: 'Dynamic Reorder and Migrate Data',\r\n        content: 'Everything in the workspace is movable! TICO is able to move the items on a list even if they are complex web-components. It can also migrate data from one component to another.',\r\n        direction: 'left',\r\n        url: 'videos/reorder-and-migrate-data.webm'\r\n    },\r\n    {\r\n        key: '7',\r\n        tocLabel: 'Jump Across Components',\r\n        title: 'Jump Across Compo nents',\r\n        content: 'TICO is so complex that you can even fly from one place to another, even if it means passing the data through multiple components',\r\n        direction: 'right',\r\n        url: 'videos/jump-across-component.webm'\r\n    },\r\n    {\r\n        key: '8',\r\n        tocLabel: 'Auto Complete Data',\r\n        title: 'Auto Complete Data',\r\n        content: 'Using TICO you can save time by using the auto-complete feature. It works even if there is data from multiple components.',\r\n        direction: 'left',\r\n        url: 'videos/auto-complete.webm'\r\n    },\r\n]\r\n\r\nexport const tesisInfo = [\r\n    {\r\n        key: '1',\r\n        tocLabel: 'Mobile App',\r\n        title: 'Mobile App',\r\n        content: 'Yo entro a la U is a project designed to help university candidates make a better decisition in wich major they want to study. The mobile app provides organized information about universities, degrees, study material and more.',\r\n        direction: 'right',\r\n        url: 'videos/yoentroalau.webm'\r\n    }\r\n]","import React, { Suspense } from 'react'\r\nimport './Dashboard.css'\r\nimport './Actions.css'\r\n//import GroundImage from '../../../assets/img/colorful-lightning.jpg'\r\n//import GroundImage from '../../../assets/img/sup.png'\r\nimport { Route, useHistory } from 'react-router-dom'\r\nimport Spinner from '../../LoadingTools/Spinner/Spinner'\r\nimport {  CSSTransition } from 'react-transition-group'\r\nimport { ticoInfo, tesisInfo } from '../VideoView/info'\r\n\r\nconst Dashboard = props => {\r\n  const history = useHistory()\r\n\r\n  //const [overlayClass, setOverlayClass] = useState('')\r\n  //const overlayMessage = useRef(null)\r\n\r\n  const onShowProject = (projectData) => {\r\n    history.replace({pathname: ''})\r\n    history.push({pathname: '/projects/' + projectData.url})\r\n    /*\r\n    setOverlayClass('showOverlay')\r\n    overlayMessage.current.innerText = \"Loading...\"\r\n    setTimeout(() => {\r\n      setShowMainSelector(false)\r\n    }, 300)\r\n    setTimeout(() => {\r\n      setshowTico(true)\r\n    }, 300)\r\n    setTimeout(() => {\r\n      setOverlayClass('hideOverlay')\r\n    }, 500)\r\n    */\r\n  }\r\n\r\n  const onBackToMain = () => {\r\n    //history.replace({pathname: ''})\r\n    //history.push({pathname: '/projects/'})\r\n  }\r\n\r\n  /*** ROUTE-COMPONENT */\r\n  const VideoView = React.lazy(() => import('../VideoView/VideoView')) \r\n  const ProjectList = React.lazy(() => import('../ProjectList/ProjectList')) \r\n  \r\n  const routes = [\r\n    { path: \"/projects/\", name: 'main', Component: ProjectList, props: { onShowProject: onShowProject } },\r\n    { path: \"/projects/tico\", name: 'tico', Component: VideoView, props: {info: ticoInfo, title: 'TICO', subtitle: 'Project Overview', onBackToMain: onBackToMain } },\r\n    { path: \"/projects/thesis\", name: 'thesis', Component: VideoView, props: {info: tesisInfo, title: 'Yo entro a la U', subtitle: 'Project Overview', onBackToMain: onBackToMain } },\r\n  ]\r\n  /******** */\r\n\r\n  return <div>\r\n     {routes.map(({ path, Component, props }) => (\r\n            <Route key={path} exact path={path}>\r\n              {({ match }) => (\r\n                <CSSTransition\r\n                  in={match != null}\r\n                  timeout={300}\r\n                  classNames=\"page\"\r\n                  unmountOnExit\r\n                >\r\n                  <div className=\"page\">\r\n                    <Suspense fallback={<Spinner />}> <Component {...props}/> </Suspense>\r\n                  </div>\r\n                </CSSTransition>\r\n              )}\r\n            </Route>\r\n      ))}\r\n{\r\n  /****\r\n      <TransitionGroup>\r\n      <CSSTransition\r\n        mountOnEnter\r\n        unmountOnExit\r\n        key={location.key}\r\n        classNames=\"300\"\r\n        timeout={500}>\r\n        <Switch location={location} >\r\n          <Route path=\"/projects/tico\" render={() => (\r\n            <Suspense fallback={<Spinner />}> <TicoComponent /> </Suspense>\r\n          )} />\r\n           <Route path=\"/projects/thesis\" render={() => (\r\n            <Suspense fallback={<Spinner />}> <TicoComponent /> </Suspense>\r\n          )} />\r\n          <Route exact path=\"\" render={() => (\r\n            <Suspense fallback={<Spinner />}>  </Suspense>\r\n          )} />\r\n          <Route>\r\n            <Redirect to=\"projects\" />\r\n          </Route>\r\n        </Switch>\r\n      </CSSTransition>\r\n    </TransitionGroup>\r\n    <div className={overlayClass + ' overlay'}\r\n      style={{\r\n        width: `100%`,\r\n        backgroundImage: `url(${GroundImage})`,\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundSize: `cover`,\r\n      }}>\r\n      <p className=\"overlay-message\" ref={overlayMessage}>\r\n        Loading...\r\n        </p>\r\n    </div>\r\n   */\r\n}  </div>\r\n}\r\n\r\nexport default Dashboard"],"sourceRoot":""}